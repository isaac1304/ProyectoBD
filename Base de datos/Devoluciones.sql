CREATE OR REPLACE FUNCTION F_LISTAR_DEVOLUCIONES
RETURN SYS_REFCURSOR
AS
  V_CURSOR SYS_REFCURSOR;
BEGIN
  OPEN V_CURSOR FOR
    SELECT * FROM DEVOLUCIONES;
    
  RETURN V_CURSOR;
END F_LISTAR_DEVOLUCIONES;

CREATE OR REPLACE PROCEDURE SP_INSERTAR_DEVOLUCION (
    P_ID_DEVOLUCION NUMBER,
    P_FECHA DATE,
    P_DEV_CED_CLIENTE NUMBER,
    P_DEV_COD_PRODUCTO NUMBER,
    P_DEV_COD_FACTURA NUMBER,
    P_MONTO_DEVOLUCION NUMBER
)
AS
BEGIN
    INSERT INTO DEVOLUCIONES (ID_DEVOLUCION, FECHA, DEV_CED_CLIENTE, DEV_COD_PRODUCTO, DEV_COD_FACTURA, MONTO_DEVOLUCION)
    VALUES (P_ID_DEVOLUCION, P_FECHA, P_DEV_CED_CLIENTE, P_DEV_COD_PRODUCTO, P_DEV_COD_FACTURA, P_MONTO_DEVOLUCION);
    COMMIT;
END SP_INSERTAR_DEVOLUCION;

CREATE OR REPLACE FUNCTION F_ACTUALIZAR_DEVOLUCION(
  P_ID_DEVOLUCION NUMBER,
  P_FECHA DATE,
  P_DEV_CED_CLIENTE NUMBER,
  P_DEV_COD_PRODUCTO NUMBER,
  P_DEV_COD_FACTURA NUMBER,
  P_MONTO_DEVOLUCION NUMBER
) RETURN BOOLEAN
IS
  V_ACTUALIZADO BOOLEAN := FALSE;
BEGIN
  UPDATE DEVOLUCIONES SET
    FECHA = P_FECHA,
    DEV_CED_CLIENTE = P_DEV_CED_CLIENTE,
    DEV_COD_PRODUCTO = P_DEV_COD_PRODUCTO,
    DEV_COD_FACTURA = P_DEV_COD_FACTURA,
    MONTO_DEVOLUCION = P_MONTO_DEVOLUCION
  WHERE ID_DEVOLUCION = P_ID_DEVOLUCION;

  IF SQL%ROWCOUNT = 1 THEN
    V_ACTUALIZADO := TRUE;
  END IF;

  RETURN V_ACTUALIZADO;
EXCEPTION
  WHEN OTHERS THEN
    RETURN FALSE;
END F_ACTUALIZAR_DEVOLUCION;

CREATE OR REPLACE PROCEDURE SP_ELIMINAR_DEVOLUCION (
    P_ID_DEVOLUCION NUMBER
)
AS
BEGIN
    DELETE FROM DEVOLUCIONES
    WHERE ID_DEVOLUCION = P_ID_DEVOLUCION;
    COMMIT;
END SP_ELIMINAR_DEVOLUCION;

CREATE OR REPLACE PACKAGE PK_DEVOLUCIONES AS
  FUNCTION F_LISTAR_DEVOLUCIONES RETURN SYS_REFCURSOR;
  PROCEDURE SP_INSERTAR_DEVOLUCION (
    P_ID_DEVOLUCION NUMBER,
    P_FECHA DATE,
    P_DEV_CED_CLIENTE NUMBER,
    P_DEV_COD_PRODUCTO NUMBER,
    P_DEV_COD_FACTURA NUMBER,
    P_MONTO_DEVOLUCION NUMBER
  );
  FUNCTION F_ACTUALIZAR_DEVOLUCION(
    P_ID_DEVOLUCION NUMBER,
    P_FECHA DATE,
    P_DEV_CED_CLIENTE NUMBER,
    P_DEV_COD_PRODUCTO NUMBER,
    P_DEV_COD_FACTURA NUMBER,
    P_MONTO_DEVOLUCION NUMBER
  ) RETURN BOOLEAN;
  PROCEDURE SP_ELIMINAR_DEVOLUCION (
    P_ID_DEVOLUCION NUMBER
  );
END PK_DEVOLUCIONES;

CREATE TABLE AUDITORIA_DEVOLUCION (
  ID_DEVOLUCION NUMBER(11,0),
  FECHA_OPERACION DATE,
  OPERACION VARCHAR2(6),
  CEDULA_CLIENTE NUMBER(11,0),
  COD_PRODUCTO NUMBER(11,0),
  COD_FACTURA NUMBER(11,0),
  MONTO_DEVOLUCION NUMBER(10,2)
);

CREATE OR REPLACE TRIGGER TRG_DEVOLUCION_INSERT
AFTER INSERT ON DEVOLUCIONES
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_DEVOLUCION (ID_DEVOLUCION, FECHA_OPERACION, OPERACION, CEDULA_CLIENTE, COD_PRODUCTO, COD_FACTURA, MONTO_DEVOLUCION)
  VALUES (:NEW.ID_DEVOLUCION, SYSDATE, 'INSERT', :NEW.DEV_CED_CLIENTE, :NEW.DEV_COD_PRODUCTO, :NEW.DEV_COD_FACTURA, :NEW.MONTO_DEVOLUCION);
END;

CREATE OR REPLACE TRIGGER TRG_DEVOLUCION_UPDATE
AFTER UPDATE ON DEVOLUCIONES
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_DEVOLUCION (ID_DEVOLUCION, FECHA_OPERACION, OPERACION, CEDULA_CLIENTE, COD_PRODUCTO, COD_FACTURA, MONTO_DEVOLUCION)
  VALUES (:OLD.ID_DEVOLUCION, SYSDATE, 'UPDATE', :OLD.DEV_CED_CLIENTE, :OLD.DEV_COD_PRODUCTO, :OLD.DEV_COD_FACTURA, :OLD.MONTO_DEVOLUCION);
END;

CREATE OR REPLACE TRIGGER TRG_DEVOLUCION_DELETE
AFTER DELETE ON DEVOLUCIONES
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_DEVOLUCION (ID_DEVOLUCION, FECHA_OPERACION, OPERACION, CEDULA_CLIENTE, COD_PRODUCTO, COD_FACTURA, MONTO_DEVOLUCION)
  VALUES (:OLD.ID_DEVOLUCION, SYSDATE, 'DELETE', :OLD.DEV_CED_CLIENTE, :OLD.DEV_COD_PRODUCTO, :OLD.DEV_COD_FACTURA, :OLD.MONTO_DEVOLUCION);
END;

