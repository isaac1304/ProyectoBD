--Scrip para crear el usuario
/as sysdba
ALTER SESSION SET "_ORACLE_SCRIPT"= TRUE;
CREATE USER PROYECTO IDENTIFIED BY "P4$$woRD"
DEFAULT TABLESPACE "USERS"
TEMPORARY TABLESPACE "TEMP";
ALTER USER PROYECTO QUOTA UNLIMITED ON USERS;
GRANT CREATE SESSION TO PROYECTO;
GRANT "RESOURCE" TO PROYECTO;
ALTER USER PROYECTO DEFAULT ROLE "RESOURCE";

GRANT DBA TO PROYECTO;
GRANT CREATE VIEW TO usuario_vistas;


--------------------------------------------------------------------------
--Creacion Tablas
CREATE TABLE CLIENTE (
  CEDULA_CLIENTE NUMBER(11,0) PRIMARY KEY,
  NOMBRE VARCHAR2(50),
  APELLIDO_1 VARCHAR2(50),
  APELLIDO_2 VARCHAR2(50),
  NACIMIENTO DATE,
  CORREO VARCHAR2(100),
  TELEFONO VARCHAR2(20),
  DIRECCION VARCHAR2(100)
);


CREATE TABLE COLABORADORES (
  ID_COLABORADOR NUMBER(11,0) PRIMARY KEY,
  CEDULA_COLABORADOR VARCHAR2(10),
  NOMBRE VARCHAR2(50),
  APELLIDO_1 VARCHAR2(50),
  APELLIDO_2 VARCHAR2(50),
  CORREO VARCHAR2(100),
  TELEFONO VARCHAR2(20),
  PUESTO VARCHAR2(50),
  COL_DIRECCION VARCHAR2(100)
);

CREATE TABLE CATEGORIA (
  ID_CATEGORIA NUMBER(11,0) PRIMARY KEY,
  NOMBRE VARCHAR2(50),
  DESCRIPCION VARCHAR2(100)
);

CREATE TABLE PRODUCTOS (
  COD_PRODUCTO NUMBER(11,0) PRIMARY KEY,
  NOMBRE VARCHAR2(50),
  DESCRIPCION VARCHAR2(1000),
  PRECIO NUMBER(10,2),
  STOCK NUMBER(10),
  PRO_ID_CATEGORIA NUMBER(11,0),
  ESTADO VARCHAR2(20),
  CONSTRAINT FK_PRODUCTOS_CATEGORIA FOREIGN KEY (PRO_ID_CATEGORIA) REFERENCES CATEGORIA(ID_CATEGORIA)
);

CREATE TABLE PROVEEDORES (
  ID_PROVEEDOR NUMBER(11,0) PRIMARY KEY,
  NOMBRE VARCHAR2(50),
  CORREO VARCHAR2(100),
  TELEFONO VARCHAR2(20),
  DIRECCION VARCHAR2(100)
);

CREATE TABLE SUCURSALES (
  ID_SUCURSAL NUMBER(11,0) PRIMARY KEY,
  NOMBRE VARCHAR2(50),
  TELEFONO VARCHAR2(20),
  DIRECCION VARCHAR2(100)
);

CREATE TABLE FACTURAS (
  COD_FACTURA NUMBER(11,0) PRIMARY KEY,
  FAC_CED_CLIENTE NUMBER(11,0),
  FAC_COD_PRODUCTO NUMBER(11,0),
  FAC_ID_COLABORADOR NUMBER(11,0),
  FECHA DATE,
  TOTAL_PAGADO NUMBER(10,2),
  CONSTRAINT FK_FACTURA_CLIENTE FOREIGN KEY (FAC_CED_CLIENTE) REFERENCES CLIENTE(CEDULA_CLIENTE),
  CONSTRAINT FK_FACTURA_PRODUCTO FOREIGN KEY (FAC_COD_PRODUCTO) REFERENCES PRODUCTOS(COD_PRODUCTO),
  CONSTRAINT FK_FACTURA_COLABORADOR FOREIGN KEY (FAC_ID_COLABORADOR) REFERENCES COLABORADORES(ID_COLABORADOR)
);

CREATE TABLE DEVOLUCIONES (
  ID_DEVOLUCION NUMBER(11,0) PRIMARY KEY,
  FECHA DATE,
  DEV_CED_CLIENTE NUMBER(11,0),
  DEV_COD_PRODUCTO NUMBER(11,0),
  DEV_COD_FACTURA NUMBER(11,0),
  MONTO_DEVOLUCION NUMBER(10,2),
  CONSTRAINT FK_DEVOLUCION_CLIENTE FOREIGN KEY (DEV_CED_CLIENTE) REFERENCES CLIENTE(CEDULA_CLIENTE),
  CONSTRAINT FK_DEVOLUCION_PRODUCTO FOREIGN KEY (DEV_COD_PRODUCTO) REFERENCES PRODUCTOS(COD_PRODUCTO),
  CONSTRAINT FK_DEVOLUCION_FACTURA FOREIGN KEY (DEV_COD_FACTURA) REFERENCES FACTURAS(COD_FACTURA)
);
----------------------------------------------------------------------------------------------

--Procedimientos almacenados y funciones de Clientes
CREATE OR REPLACE PROCEDURE SP_INSERTAR_CLIENTE (
    P_CEDULA_CLIENTE NUMBER,
    P_NOMBRE VARCHAR2,
    P_APELLIDO_1 VARCHAR2,
    P_APELLIDO_2 VARCHAR2,
    P_NACIMIENTO DATE,
    P_CORREO VARCHAR2,
    P_TELEFONO VARCHAR2,
    P_DIRECCION VARCHAR2
)
AS
BEGIN
    INSERT INTO CLIENTE (CEDULA_CLIENTE, NOMBRE, APELLIDO_1, APELLIDO_2, NACIMIENTO, CORREO, TELEFONO, DIRECCION)
    VALUES (P_CEDULA_CLIENTE, P_NOMBRE, P_APELLIDO_1, P_APELLIDO_2, P_NACIMIENTO, P_CORREO, P_TELEFONO, P_DIRECCION);
    COMMIT;
END SP_INSERTAR_CLIENTE;

CREATE OR REPLACE FUNCTION F_BUSCAR_CLIENTE(p_cedula IN NUMBER)
RETURN CLIENTE%ROWTYPE
IS
  v_cliente CLIENTE%ROWTYPE;
BEGIN
  SELECT *
  INTO v_cliente
  FROM CLIENTE
  WHERE CEDULA_CLIENTE = p_cedula;

  RETURN v_cliente;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('El cliente con cï¿½dula ' || p_cedula || ' no existe en la tabla CLIENTE');
    RETURN NULL;
END;


CREATE OR REPLACE FUNCTION F_ACTUALIZAR_CLIENTE(cedula IN NUMBER, nombre IN VARCHAR2, apellido1 IN VARCHAR2, apellido2 IN VARCHAR2, nacimiento IN DATE, correo IN VARCHAR2, telefono IN VARCHAR2, direccion IN VARCHAR2)
RETURN BOOLEAN
IS
BEGIN
  UPDATE CLIENTE
  SET NOMBRE = nombre,
      APELLIDO_1 = apellido1,
      APELLIDO_2 = apellido2,
      NACIMIENTO = nacimiento,
      CORREO = correo,
      TELEFONO = telefono,
      DIRECCION = direccion
  WHERE CEDULA_CLIENTE = cedula;

  IF SQL%ROWCOUNT = 1 THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    RETURN FALSE;
END F_ACTUALIZAR_CLIENTE;
/

CREATE OR REPLACE PROCEDURE SP_ELIMINAR_CLIENTE (
    P_CEDULA_CLIENTE NUMBER
)
AS
BEGIN
    DELETE FROM CLIENTE
    WHERE CEDULA_CLIENTE = P_CEDULA_CLIENTE;
    COMMIT;
END SP_ELIMINAR_CLIENTE;


--Procedimientos almacenados y funciones de COLABORADORES

CREATE OR REPLACE PROCEDURE SP_INSERTAR_COLABORADOR (
    P_ID_COLABORADOR NUMBER,
    P_CEDULA_COLABORADOR VARCHAR2,
    P_NOMBRE VARCHAR2,
    P_APELLIDO_1 VARCHAR2,
    P_APELLIDO_2 VARCHAR2,
    P_CORREO VARCHAR2,
    P_TELEFONO VARCHAR2,
    P_PUESTO VARCHAR2,
    P_COL_DIRECCION VARCHAR2
)
AS
BEGIN
    INSERT INTO COLABORADORES (ID_COLABORADOR, CEDULA_COLABORADOR, NOMBRE, APELLIDO_1, APELLIDO_2, CORREO, TELEFONO, PUESTO, COL_DIRECCION)
    VALUES (P_ID_COLABORADOR, P_CEDULA_COLABORADOR, P_NOMBRE, P_APELLIDO_1, P_APELLIDO_2, P_CORREO, P_TELEFONO, P_PUESTO, P_COL_DIRECCION);
    COMMIT;
END SP_INSERTAR_COLABORADOR;

CREATE OR REPLACE FUNCTION F_BUSCAR_COLABORADOR(id IN NUMBER)
RETURN COLABORADORES%ROWTYPE
IS
  colaborador COLABORADORES%ROWTYPE;
BEGIN
  SELECT *
  INTO colaborador
  FROM COLABORADORES
  WHERE ID_COLABORADOR = id;

  RETURN colaborador;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
END F_BUSCAR_COLABORADOR;
/

CREATE OR REPLACE FUNCTION F_ACTUALIZAR_COLABORADOR(id IN NUMBER, cedula IN VARCHAR2, nombre IN VARCHAR2, apellido1 IN VARCHAR2, apellido2 IN VARCHAR2, correo IN VARCHAR2, telefono IN VARCHAR2, puesto IN VARCHAR2, direccion IN VARCHAR2)
RETURN BOOLEAN
IS
BEGIN
  UPDATE COLABORADORES
  SET CEDULA_COLABORADOR = cedula,
      NOMBRE = nombre,
      APELLIDO_1 = apellido1,
      APELLIDO_2 = apellido2,
      CORREO = correo,
      TELEFONO = telefono,
      PUESTO = puesto,
      COL_DIRECCION = direccion
  WHERE ID_COLABORADOR = id;

  IF SQL%ROWCOUNT = 1 THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    RETURN FALSE;
END F_ACTUALIZAR_COLABORADOR;
/

CREATE OR REPLACE PROCEDURE SP_ELIMINAR_COLABORADOR (
    P_ID_COLABORADOR NUMBER
)
AS
BEGIN
    DELETE FROM COLABORADORES
    WHERE ID_COLABORADOR = P_ID_COLABORADOR;
    COMMIT;
END SP_ELIMINAR_COLABORADOR;

-- Procedimientos almacenados y funciones de Categoria
CREATE OR REPLACE PROCEDURE SP_INSERTAR_CATEGORIA (
    P_ID_CATEGORIA IN NUMBER,
    P_NOMBRE IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2
)
AS
BEGIN
    INSERT INTO CATEGORIA (ID_CATEGORIA, NOMBRE, DESCRIPCION)
    VALUES (P_ID_CATEGORIA, P_NOMBRE, P_DESCRIPCION);
    COMMIT;
END SP_INSERTAR_CATEGORIA;

CREATE OR REPLACE FUNCTION F_BUSCAR_CATEGORIA(id IN NUMBER)
RETURN CATEGORIA%ROWTYPE
IS
  categoria CATEGORIA%ROWTYPE;
BEGIN
  SELECT *
  INTO categoria
  FROM CATEGORIA
  WHERE ID_CATEGORIA = id;

  RETURN categoria;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
END F_BUSCAR_CATEGORIA;
/

CREATE OR REPLACE FUNCTION F_ACTUALIZAR_CATEGORIA(id IN NUMBER, nombre IN VARCHAR2, descripcion IN VARCHAR2)
RETURN BOOLEAN
IS
BEGIN
  UPDATE CATEGORIA
  SET NOMBRE = nombre,
      DESCRIPCION = descripcion
  WHERE ID_CATEGORIA = id;

  IF SQL%ROWCOUNT = 1 THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    RETURN FALSE;
END F_ACTUALIZAR_CATEGORIA;
/

CREATE OR REPLACE PROCEDURE SP_ELIMINAR_CATEGORIA (
    P_ID_CATEGORIA IN NUMBER
)
AS
BEGIN
    DELETE FROM CATEGORIA
    WHERE ID_CATEGORIA = P_ID_CATEGORIA;
    COMMIT;
END SP_ELIMINAR_CATEGORIA;

--Procedimientos almacenados y funciones de Productos

CREATE OR REPLACE PROCEDURE SP_INSERTAR_PRODUCTO (
    P_COD_PRODUCTO NUMBER,
    P_NOMBRE VARCHAR2,
    P_DESCRIPCION VARCHAR2,
    P_PRECIO NUMBER,
    P_STOCK NUMBER,
    P_PRO_ID_CATEGORIA NUMBER,
    P_ESTADO VARCHAR2
)
AS
BEGIN
    INSERT INTO PRODUCTOS (COD_PRODUCTO, NOMBRE, DESCRIPCION, PRECIO, STOCK, PRO_ID_CATEGORIA, ESTADO)
    VALUES (P_COD_PRODUCTO, P_NOMBRE, P_DESCRIPCION, P_PRECIO, P_STOCK, P_PRO_ID_CATEGORIA, P_ESTADO);
    COMMIT;
END SP_INSERTAR_PRODUCTO;

CREATE OR REPLACE FUNCTION F_BUSCAR_PRODUCTO(codigo IN NUMBER)
RETURN PRODUCTOS%ROWTYPE
IS
  producto PRODUCTOS%ROWTYPE;
BEGIN
  SELECT *
  INTO producto
  FROM PRODUCTOS
  WHERE COD_PRODUCTO = codigo;

  RETURN producto;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
END F_BUSCAR_PRODUCTO;
/

CREATE OR REPLACE FUNCTION F_ACTUALIZAR_PRODUCTO(codigo IN NUMBER, nombre IN VARCHAR2, descripcion IN VARCHAR2, precio IN NUMBER, stock IN NUMBER, categoria IN NUMBER, estado IN VARCHAR2)
RETURN BOOLEAN
IS
BEGIN
  UPDATE PRODUCTOS
  SET NOMBRE = nombre,
      DESCRIPCION = descripcion,
      PRECIO = precio,
      STOCK = stock,
      PRO_ID_CATEGORIA = categoria,
      ESTADO = estado
  WHERE COD_PRODUCTO = codigo;

  IF SQL%ROWCOUNT = 1 THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    RETURN FALSE;
END F_ACTUALIZAR_PRODUCTO;
/

CREATE OR REPLACE FUNCTION F_PRODUCTOS_POR_CATEGORIA(categoria IN NUMBER)
RETURN SYS_REFCURSOR
IS
  productos_cursor SYS_REFCURSOR;
BEGIN
  OPEN productos_cursor FOR
    SELECT *
    FROM PRODUCTOS
    WHERE PRO_ID_CATEGORIA = categoria;

  RETURN productos_cursor;
END F_PRODUCTOS_POR_CATEGORIA;
/

CREATE OR REPLACE PROCEDURE SP_ELIMINAR_PRODUCTO (
    P_COD_PRODUCTO NUMBER
)
AS
BEGIN
    DELETE FROM PRODUCTOS
    WHERE COD_PRODUCTO = P_COD_PRODUCTO;
    COMMIT;
END SP_ELIMINAR_PRODUCTO;

-- Procedimientos almacenados y funciones de Proveedores

CREATE OR REPLACE PROCEDURE SP_INSERTAR_PROVEEDOR (
    P_ID_PROVEEDOR NUMBER,
    P_NOMBRE VARCHAR2,
    P_CORREO VARCHAR2,
    P_TELEFONO VARCHAR2,
    P_DIRECCION VARCHAR2
)
AS
BEGIN
    INSERT INTO PROVEEDORES (ID_PROVEEDOR, NOMBRE, CORREO, TELEFONO, DIRECCION)
    VALUES (P_ID_PROVEEDOR, P_NOMBRE, P_CORREO, P_TELEFONO, P_DIRECCION);
    COMMIT;
END SP_INSERTAR_PROVEEDOR;

CREATE OR REPLACE FUNCTION F_BUSCAR_PROVEEDOR(id_proveedor IN NUMBER)
RETURN PROVEEDORES%ROWTYPE
IS
  proveedor PROVEEDORES%ROWTYPE;
BEGIN
  SELECT *
  INTO proveedor
  FROM PROVEEDORES
  WHERE ID_PROVEEDOR = id_proveedor;

  RETURN proveedor;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
END F_BUSCAR_PROVEEDOR;

CREATE OR REPLACE FUNCTION F_ACTUALIZAR_PROVEEDOR(id_proveedor IN NUMBER, nombre IN VARCHAR2, correo IN VARCHAR2, telefono IN VARCHAR2, direccion IN VARCHAR2)
RETURN BOOLEAN
IS
BEGIN
  UPDATE PROVEEDORES
  SET NOMBRE = nombre,
      CORREO = correo,
      TELEFONO = telefono,
      DIRECCION = direccion
  WHERE ID_PROVEEDOR = id_proveedor;

  IF SQL%ROWCOUNT = 1 THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    RETURN FALSE;
END F_ACTUALIZAR_PROVEEDOR;

CREATE OR REPLACE PROCEDURE SP_ELIMINAR_PROVEEDOR (
    P_ID_PROVEEDOR NUMBER
)
AS
BEGIN
    DELETE FROM PROVEEDORES
    WHERE ID_PROVEEDOR = P_ID_PROVEEDOR;
    COMMIT;
END SP_ELIMINAR_PROVEEDOR;

--Procedimientos almacenados y funciones de SUCURSALES

CREATE OR REPLACE PROCEDURE SP_INSERTAR_SUCURSAL (
    P_ID_SUCURSAL NUMBER,
    P_NOMBRE VARCHAR2,
    P_TELEFONO VARCHAR2,
    P_DIRECCION VARCHAR2
)
AS
BEGIN
    INSERT INTO SUCURSALES (ID_SUCURSAL, NOMBRE, TELEFONO, DIRECCION)
    VALUES (P_ID_SUCURSAL, P_NOMBRE, P_TELEFONO, P_DIRECCION);
    COMMIT;
END SP_INSERTAR_SUCURSAL;

CREATE OR REPLACE FUNCTION F_BUSCAR_SUCURSAL(id_sucursal IN NUMBER)
RETURN SUCURSALES%ROWTYPE
IS
  sucursal SUCURSALES%ROWTYPE;
BEGIN
  SELECT *
  INTO sucursal
  FROM SUCURSALES
  WHERE ID_SUCURSAL = id_sucursal;

  RETURN sucursal;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
END F_BUSCAR_SUCURSAL;
/

CREATE OR REPLACE FUNCTION F_ACTUALIZAR_SUCURSAL(id_sucursal IN NUMBER, nombre IN VARCHAR2, telefono IN VARCHAR2, direccion IN VARCHAR2)
RETURN BOOLEAN
IS
BEGIN
  UPDATE SUCURSALES
  SET NOMBRE = nombre,
      TELEFONO = telefono,
      DIRECCION = direccion
  WHERE ID_SUCURSAL = id_sucursal;

  IF SQL%ROWCOUNT = 1 THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    RETURN FALSE;
END F_ACTUALIZAR_SUCURSAL;
/

CREATE OR REPLACE PROCEDURE SP_ELIMINAR_SUCURSAL (
    P_ID_SUCURSAL NUMBER
)
AS
BEGIN
    DELETE FROM SUCURSALES
    WHERE ID_SUCURSAL = P_ID_SUCURSAL;
    COMMIT;
END SP_ELIMINAR_SUCURSAL;

-- Procedimientos almacenados y funciones de Facturas

CREATE OR REPLACE PROCEDURE SP_INSERTAR_FACTURA (
    P_COD_FACTURA NUMBER,
    P_CEDULA_CLIENTE NUMBER,
    P_COD_PRODUCTO NUMBER,
    P_ID_COLABORADOR NUMBER,
    P_FECHA DATE,
    P_TOTAL_PAGADO NUMBER
)
AS
BEGIN
    INSERT INTO FACTURAS (COD_FACTURA, FAC_CED_CLIENTE, FAC_COD_PRODUCTO, FAC_ID_COLABORADOR, FECHA, TOTAL_PAGADO)
    VALUES (P_COD_FACTURA, P_CEDULA_CLIENTE, P_COD_PRODUCTO, P_ID_COLABORADOR, P_FECHA, P_TOTAL_PAGADO);
    COMMIT;
END SP_INSERTAR_FACTURA;

select * from facturas;

CREATE OR REPLACE FUNCTION F_BUSCAR_FACTURA(cod_factura IN NUMBER)
RETURN FACTURA%ROWTYPE
IS
  factura FACTURA%ROWTYPE;
BEGIN
  SELECT *
  INTO factura
  FROM FACTURAS
  WHERE COD_FACTURA = cod_factura;

  RETURN factura;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
END F_BUSCAR_FACTURA;
/

CREATE OR REPLACE FUNCTION F_ACTUALIZAR_FACTURA(cod_factura IN NUMBER, fecha IN DATE, total_pagado IN NUMBER)
RETURN BOOLEAN
IS
BEGIN
  UPDATE FACTURAS
  SET FECHA = fecha, TOTAL_PAGADO = total_pagado
  WHERE COD_FACTURA = cod_factura;

  IF SQL%ROWCOUNT = 1 THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    RETURN FALSE;
END F_ACTUALIZAR_FACTURA;
/

CREATE OR REPLACE PROCEDURE SP_ELIMINAR_FACTURA (
    P_COD_FACTURA NUMBER
)
AS
BEGIN
    DELETE FROM FACTURAS
    WHERE COD_FACTURA = P_COD_FACTURA;
    COMMIT;
END SP_ELIMINAR_FACTURA;

-- Procedimientos almacenados y funciones de Devoluciones

CREATE OR REPLACE PROCEDURE SP_INSERTAR_DEVOLUCION (
    P_ID_DEVOLUCION NUMBER,
    P_FECHA DATE,
    P_DEV_CED_CLIENTE NUMBER,
    P_DEV_COD_PRODUCTO NUMBER,
    P_DEV_COD_FACTURA NUMBER,
    P_MONTO_DEVOLUCION NUMBER
)
AS
BEGIN
    INSERT INTO DEVOLUCIONES (ID_DEVOLUCION, FECHA, DEV_CED_CLIENTE, DEV_COD_PRODUCTO, DEV_COD_FACTURA, MONTO_DEVOLUCION)
    VALUES (P_ID_DEVOLUCION, P_FECHA, P_DEV_CED_CLIENTE, P_DEV_COD_PRODUCTO, P_DEV_COD_FACTURA, P_MONTO_DEVOLUCION);
    COMMIT;
END SP_INSERTAR_DEVOLUCION;

CREATE OR REPLACE FUNCTION F_BUSCAR_DEVOLUCION(id_devolucion IN NUMBER)
RETURN DEVOLUCIONES%ROWTYPE
IS
  devolucion DEVOLUCIONES%ROWTYPE;
BEGIN
  SELECT *
  INTO devolucion
  FROM DEVOLUCIONES
  WHERE ID_DEVOLUCION = id_devolucion;

  RETURN devolucion;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
END F_BUSCAR_DEVOLUCION;
/

CREATE OR REPLACE FUNCTION F_ACTUALIZAR_DEVOLUCION(id_devolucion IN NUMBER, fecha IN DATE, cedula_cliente IN NUMBER, cod_producto IN NUMBER, cod_factura IN NUMBER, monto_devolucion IN NUMBER)
RETURN BOOLEAN
IS
BEGIN
  UPDATE DEVOLUCIONES
  SET FECHA = fecha,
      DEV_CED_CLIENTE = cedula_cliente,
      DEV_COD_PRODUCTO = cod_producto,
      DEV_COD_FACTURA = cod_factura,
      MONTO_DEVOLUCION = monto_devolucion
  WHERE ID_DEVOLUCION = id_devolucion;

  IF SQL%ROWCOUNT = 1 THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    RETURN FALSE;
END F_ACTUALIZAR_DEVOLUCION;
/

CREATE OR REPLACE PROCEDURE SP_ELIMINAR_DEVOLUCION (
    P_ID_DEVOLUCION NUMBER
)
AS
BEGIN
    DELETE FROM DEVOLUCIONES
    WHERE ID_DEVOLUCION = P_ID_DEVOLUCION;
    COMMIT;
END SP_ELIMINAR_DEVOLUCION;

-- Triggers CLIENTE

CREATE TABLE AUDITORIA_CLIENTE (
  CEDULA_CLIENTE NUMBER(11,0),
  NOMBRE VARCHAR2(50),
  APELLIDO_1 VARCHAR2(50),
  APELLIDO_2 VARCHAR2(50),
  NACIMIENTO DATE,
  CORREO VARCHAR2(100),
  TELEFONO VARCHAR2(20),
  DIRECCION VARCHAR2(100),
  OPERACION VARCHAR2(6),
  FECHA_OPERACION DATE
);

CREATE OR REPLACE TRIGGER TRG_CLIENTE_INSERT
AFTER INSERT ON CLIENTE
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_CLIENTE (CEDULA_CLIENTE, NOMBRE, APELLIDO_1, APELLIDO_2, NACIMIENTO, CORREO, TELEFONO, DIRECCION, OPERACION, FECHA_OPERACION)
  VALUES (:NEW.CEDULA_CLIENTE, :NEW.NOMBRE, :NEW.APELLIDO_1, :NEW.APELLIDO_2, :NEW.NACIMIENTO, :NEW.CORREO, :NEW.TELEFONO, :NEW.DIRECCION, 'INSERT', SYSDATE);
END;

CREATE OR REPLACE TRIGGER TRG_CLIENTE_UPDATE
AFTER UPDATE ON CLIENTE
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_CLIENTE (CEDULA_CLIENTE, NOMBRE, APELLIDO_1, APELLIDO_2, NACIMIENTO, CORREO, TELEFONO, DIRECCION, OPERACION, FECHA_OPERACION)
  VALUES (:OLD.CEDULA_CLIENTE, :OLD.NOMBRE, :OLD.APELLIDO_1, :OLD.APELLIDO_2, :OLD.NACIMIENTO, :OLD.CORREO, :OLD.TELEFONO, :OLD.DIRECCION, 'UPDATE', SYSDATE);
END;

CREATE OR REPLACE TRIGGER TRG_CLIENTE_DELETE
AFTER DELETE ON CLIENTE
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_CLIENTE (CEDULA_CLIENTE, NOMBRE, APELLIDO_1, APELLIDO_2, NACIMIENTO, CORREO, TELEFONO, DIRECCION, OPERACION, FECHA_OPERACION)
  VALUES (:OLD.CEDULA_CLIENTE, :OLD.NOMBRE, :OLD.APELLIDO_1, :OLD.APELLIDO_2, :OLD.NACIMIENTO, :OLD.CORREO, :OLD.TELEFONO, :OLD.DIRECCION, 'DELETE', SYSDATE);
END;

-- Triggers COLABORADORES

CREATE TABLE AUDITORIA_COLABORADORES (
  ID_COLABORADOR NUMBER(11,0),
  CEDULA_COLABORADOR VARCHAR2(10),
  NOMBRE VARCHAR2(50),
  APELLIDO_1 VARCHAR2(50),
  APELLIDO_2 VARCHAR2(50),
  CORREO VARCHAR2(100),
  TELEFONO VARCHAR2(20),
  PUESTO VARCHAR2(50),
  COL_DIRECCION VARCHAR2(100),
  OPERACION VARCHAR2(6),
  FECHA_OPERACION DATE
);

CREATE OR REPLACE TRIGGER TRG_COLABORADORES_INSERT
AFTER INSERT ON COLABORADORES
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_COLABORADORES (ID_COLABORADOR, CEDULA_COLABORADOR, NOMBRE, APELLIDO_1, APELLIDO_2, CORREO, TELEFONO, PUESTO, COL_DIRECCION, OPERACION, FECHA_OPERACION)
  VALUES (:NEW.ID_COLABORADOR, :NEW.CEDULA_COLABORADOR, :NEW.NOMBRE, :NEW.APELLIDO_1, :NEW.APELLIDO_2, :NEW.CORREO, :NEW.TELEFONO, :NEW.PUESTO, :NEW.COL_DIRECCION, 'INSERT', SYSDATE);
END;

CREATE OR REPLACE TRIGGER TRG_COLABORADORES_UPDATE
AFTER UPDATE ON COLABORADORES
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_COLABORADORES (ID_COLABORADOR, CEDULA_COLABORADOR, NOMBRE, APELLIDO_1, APELLIDO_2, CORREO, TELEFONO, PUESTO, COL_DIRECCION, OPERACION, FECHA_OPERACION)
  VALUES (:OLD.ID_COLABORADOR, :OLD.CEDULA_COLABORADOR, :OLD.NOMBRE, :OLD.APELLIDO_1, :OLD.APELLIDO_2, :OLD.CORREO, :OLD.TELEFONO, :OLD.PUESTO, :OLD.COL_DIRECCION, 'UPDATE', SYSDATE);
END;

CREATE OR REPLACE TRIGGER TRG_COLABORADORES_DELETE
AFTER DELETE ON COLABORADORES
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_COLABORADORES (ID_COLABORADOR, CEDULA_COLABORADOR, NOMBRE, APELLIDO_1, APELLIDO_2, CORREO, TELEFONO, PUESTO, COL_DIRECCION, OPERACION, FECHA_OPERACION)
  VALUES (:OLD.ID_COLABORADOR, :OLD.CEDULA_COLABORADOR, :OLD.NOMBRE, :OLD.APELLIDO_1, :OLD.APELLIDO_2, :OLD.CORREO, :OLD.TELEFONO, :OLD.PUESTO, :OLD.COL_DIRECCION, 'DELETE', SYSDATE);
END;

-- Triggers CATEGORIA

CREATE TABLE AUDITORIA_CATEGORIA (
  ID_CATEGORIA NUMBER(11,0),
  NOMBRE VARCHAR2(50),
  DESCRIPCION VARCHAR2(100),
  OPERACION VARCHAR2(6),
  FECHA_OPERACION DATE
);

CREATE OR REPLACE TRIGGER TRG_CATEGORIA_INSERT
AFTER INSERT ON CATEGORIA
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_CATEGORIA (ID_CATEGORIA, NOMBRE, DESCRIPCION, OPERACION, FECHA_OPERACION)
  VALUES (:NEW.ID_CATEGORIA, :NEW.NOMBRE, :NEW.DESCRIPCION, 'INSERT', SYSDATE);
END;

CREATE OR REPLACE TRIGGER TRG_CATEGORIA_UPDATE
AFTER UPDATE ON CATEGORIA
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_CATEGORIA (ID_CATEGORIA, NOMBRE, DESCRIPCION, OPERACION, FECHA_OPERACION)
  VALUES (:OLD.ID_CATEGORIA, :OLD.NOMBRE, :OLD.DESCRIPCION, 'UPDATE', SYSDATE);
END;

CREATE OR REPLACE TRIGGER TRG_CATEGORIA_DELETE
AFTER DELETE ON CATEGORIA
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_CATEGORIA (ID_CATEGORIA, NOMBRE, DESCRIPCION, OPERACION, FECHA_OPERACION)
  VALUES (:OLD.ID_CATEGORIA, :OLD.NOMBRE, :OLD.DESCRIPCION, 'DELETE', SYSDATE);
END;


-- Triggers Productos

CREATE TABLE AUDITORIA_PRODUCTO (
  COD_PRODUCTO NUMBER(11,0),
  NOMBRE VARCHAR2(50),
  DESCRIPCION VARCHAR2(100),
  PRECIO NUMBER(10,2),
  STOCK NUMBER(10),
  PRO_ID_CATEGORIA NUMBER(11,0),
  ESTADO VARCHAR2(20),
  OPERACION VARCHAR2(6),
  FECHA_OPERACION DATE
);

CREATE OR REPLACE TRIGGER TRG_PRODUCTO_INSERT
AFTER INSERT ON PRODUCTOS
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_PRODUCTO (COD_PRODUCTO, NOMBRE, DESCRIPCION, PRECIO, STOCK, PRO_ID_CATEGORIA, ESTADO, OPERACION, FECHA_OPERACION)
  VALUES (:NEW.COD_PRODUCTO, :NEW.NOMBRE, :NEW.DESCRIPCION, :NEW.PRECIO, :NEW.STOCK, :NEW.PRO_ID_CATEGORIA, :NEW.ESTADO, 'INSERT', SYSDATE);
END;

CREATE OR REPLACE TRIGGER TRG_PRODUCTO_UPDATE
AFTER UPDATE ON PRODUCTOS
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_PRODUCTO (COD_PRODUCTO, NOMBRE, DESCRIPCION, PRECIO, STOCK, PRO_ID_CATEGORIA, ESTADO, OPERACION, FECHA_OPERACION)
  VALUES (:OLD.COD_PRODUCTO, :OLD.NOMBRE, :OLD.DESCRIPCION, :OLD.PRECIO, :OLD.STOCK, :OLD.PRO_ID_CATEGORIA, :OLD.ESTADO, 'UPDATE', SYSDATE);
END;

CREATE OR REPLACE TRIGGER TRG_PRODUCTO_DELETE
AFTER DELETE ON PRODUCTOS
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_PRODUCTO (COD_PRODUCTO, NOMBRE, DESCRIPCION, PRECIO, STOCK, PRO_ID_CATEGORIA, ESTADO, OPERACION, FECHA_OPERACION)
  VALUES (:OLD.COD_PRODUCTO, :OLD.NOMBRE, :OLD.DESCRIPCION, :OLD.PRECIO, :OLD.STOCK, :OLD.PRO_ID_CATEGORIA, :OLD.ESTADO, 'DELETE', SYSDATE);
END;


-- Triggers PROVEEDORES

CREATE TABLE AUDITORIA_PROVEEDORES (
  ID_PROVEEDOR NUMBER(11,0),
  NOMBRE VARCHAR2(50),
  CORREO VARCHAR2(100),
  TELEFONO VARCHAR2(20),
  DIRECCION VARCHAR2(100),
  OPERACION VARCHAR2(6),
  FECHA_OPERACION DATE
);

CREATE OR REPLACE TRIGGER TRG_PROVEEDORES_INSERT
AFTER INSERT ON PROVEEDORES
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_PROVEEDORES (ID_PROVEEDOR, NOMBRE, CORREO, TELEFONO, DIRECCION, OPERACION, FECHA_OPERACION)
  VALUES (:NEW.ID_PROVEEDOR, :NEW.NOMBRE, :NEW.CORREO, :NEW.TELEFONO, :NEW.DIRECCION, 'INSERT', SYSDATE);
END;

CREATE OR REPLACE TRIGGER TRG_PROVEEDORES_UPDATE
AFTER UPDATE ON PROVEEDORES
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_PROVEEDORES (ID_PROVEEDOR, NOMBRE, CORREO, TELEFONO, DIRECCION, OPERACION, FECHA_OPERACION)
  VALUES (:OLD.ID_PROVEEDOR, :OLD.NOMBRE, :OLD.CORREO, :OLD.TELEFONO, :OLD.DIRECCION, 'UPDATE', SYSDATE);
END;

CREATE OR REPLACE TRIGGER TRG_PROVEEDORES_DELETE
AFTER DELETE ON PROVEEDORES
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_PROVEEDORES (ID_PROVEEDOR, NOMBRE, CORREO, TELEFONO, DIRECCION, OPERACION, FECHA_OPERACION)
  VALUES (:OLD.ID_PROVEEDOR, :OLD.NOMBRE, :OLD.CORREO, :OLD.TELEFONO, :OLD.DIRECCION, 'DELETE', SYSDATE);
END;

-- TRiggers SUCURSALES

CREATE TABLE AUDITORIA_SUCURSAL (
  ID_SUCURSAL NUMBER(11,0),
  NOMBRE VARCHAR2(50),
  TELEFONO VARCHAR2(20),
  DIRECCION VARCHAR2(100),
  OPERACION VARCHAR2(6),
  FECHA_OPERACION DATE
);

CREATE OR REPLACE TRIGGER TRG_SUCURSAL_INSERT
AFTER INSERT ON SUCURSALES
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_SUCURSAL (ID_SUCURSAL, NOMBRE, TELEFONO, DIRECCION, OPERACION, FECHA_OPERACION)
  VALUES (:NEW.ID_SUCURSAL, :NEW.NOMBRE, :NEW.TELEFONO, :NEW.DIRECCION, 'INSERT', SYSDATE);
END;

CREATE OR REPLACE TRIGGER TRG_SUCURSAL_UPDATE
AFTER UPDATE ON SUCURSALES
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_SUCURSAL (ID_SUCURSAL, NOMBRE, TELEFONO, DIRECCION, OPERACION, FECHA_OPERACION)
  VALUES (:OLD.ID_SUCURSAL, :OLD.NOMBRE, :OLD.TELEFONO, :OLD.DIRECCION, 'UPDATE', SYSDATE);
END;

CREATE OR REPLACE TRIGGER TRG_SUCURSAL_DELETE
AFTER DELETE ON SUCURSALES
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_SUCURSAL (ID_SUCURSAL, NOMBRE, TELEFONO, DIRECCION, OPERACION, FECHA_OPERACION)
  VALUES (:OLD.ID_SUCURSAL, :OLD.NOMBRE, :OLD.TELEFONO, :OLD.DIRECCION, 'DELETE', SYSDATE);
END;

-- Triggers Facturas

CREATE TABLE AUDITORIA_FACTURAS (
  COD_FACTURA NUMBER(11,0),
  FAC_CED_CLIENTE NUMBER(11,0),
  FAC_COD_PRODUCTO NUMBER(11,0),
  FAC_ID_COLABORADOR NUMBER(11,0),
  FECHA DATE,
  TOTAL_PAGADO NUMBER(10,2),
  OPERACION VARCHAR2(6),
  FECHA_OPERACION DATE
);

CREATE OR REPLACE TRIGGER TRG_FACTURA_INSERT
AFTER INSERT ON FACTURAS
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_FACTURAS (COD_FACTURA, FAC_CED_CLIENTE, FAC_COD_PRODUCTO, FAC_ID_COLABORADOR, FECHA, TOTAL_PAGADO, OPERACION, FECHA_OPERACION)
  VALUES (:NEW.COD_FACTURA, :NEW.FAC_CED_CLIENTE, :NEW.FAC_COD_PRODUCTO, :NEW.FAC_ID_COLABORADOR, :NEW.FECHA, :NEW.TOTAL_PAGADO, 'INSERT', SYSDATE);
END;

CREATE OR REPLACE TRIGGER TRG_FACTURA_UPDATE
AFTER UPDATE ON FACTURAS
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_FACTURAS (COD_FACTURA, FAC_CED_CLIENTE, FAC_COD_PRODUCTO, FAC_ID_COLABORADOR, FECHA, TOTAL_PAGADO, OPERACION, FECHA_OPERACION)
  VALUES (:OLD.COD_FACTURA, :OLD.FAC_CED_CLIENTE, :OLD.FAC_COD_PRODUCTO, :OLD.FAC_ID_COLABORADOR, :OLD.FECHA, :OLD.TOTAL_PAGADO, 'UPDATE', SYSDATE);
END;

CREATE OR REPLACE TRIGGER TRG_FACTURA_DELETE
AFTER DELETE ON FACTURAS
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_FACTURAS (COD_FACTURA, FAC_CED_CLIENTE, FAC_COD_PRODUCTO, FAC_ID_COLABORADOR, FECHA, TOTAL_PAGADO, OPERACION, FECHA_OPERACION)
  VALUES (:OLD.COD_FACTURA, :OLD.FAC_CED_CLIENTE, :OLD.FAC_COD_PRODUCTO, :OLD.FAC_ID_COLABORADOR, :OLD.FECHA, :OLD.TOTAL_PAGADO, 'DELETE', SYSDATE);
END;


-- Triggers DEVOLUCIONES

CREATE TABLE AUDITORIA_DEVOLUCION (
  ID_DEVOLUCION NUMBER(11,0),
  FECHA_OPERACION DATE,
  OPERACION VARCHAR2(6),
  CEDULA_CLIENTE NUMBER(11,0),
  COD_PRODUCTO NUMBER(11,0),
  COD_FACTURA NUMBER(11,0),
  MONTO_DEVOLUCION NUMBER(10,2)
);

CREATE OR REPLACE TRIGGER TRG_DEVOLUCION_INSERT
AFTER INSERT ON DEVOLUCIONES
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_DEVOLUCION (ID_DEVOLUCION, FECHA_OPERACION, OPERACION, CEDULA_CLIENTE, COD_PRODUCTO, COD_FACTURA, MONTO_DEVOLUCION)
  VALUES (:NEW.ID_DEVOLUCION, SYSDATE, 'INSERT', :NEW.DEV_CED_CLIENTE, :NEW.DEV_COD_PRODUCTO, :NEW.DEV_COD_FACTURA, :NEW.MONTO_DEVOLUCION);
END;

CREATE OR REPLACE TRIGGER TRG_DEVOLUCION_UPDATE
AFTER UPDATE ON DEVOLUCIONES
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_DEVOLUCION (ID_DEVOLUCION, FECHA_OPERACION, OPERACION, CEDULA_CLIENTE, COD_PRODUCTO, COD_FACTURA, MONTO_DEVOLUCION)
  VALUES (:OLD.ID_DEVOLUCION, SYSDATE, 'UPDATE', :OLD.DEV_CED_CLIENTE, :OLD.DEV_COD_PRODUCTO, :OLD.DEV_COD_FACTURA, :OLD.MONTO_DEVOLUCION);
END;

CREATE OR REPLACE TRIGGER TRG_DEVOLUCION_DELETE
AFTER DELETE ON DEVOLUCIONES
FOR EACH ROW
BEGIN
  INSERT INTO AUDITORIA_DEVOLUCION (ID_DEVOLUCION, FECHA_OPERACION, OPERACION, CEDULA_CLIENTE, COD_PRODUCTO, COD_FACTURA, MONTO_DEVOLUCION)
  VALUES (:OLD.ID_DEVOLUCION, SYSDATE, 'DELETE', :OLD.DEV_CED_CLIENTE, :OLD.DEV_COD_PRODUCTO, :OLD.DEV_COD_FACTURA, :OLD.MONTO_DEVOLUCION);
END;

--Vistas
--Vista de las devoluciones con informaciï¿½n del cliente, el producto y la factura:
CREATE VIEW vista_devoluciones AS
SELECT d.ID_DEVOLUCION, d.FECHA, c.NOMBRE AS CLIENTE, p.NOMBRE AS PRODUCTO, f.COD_FACTURA, d.MONTO_DEVOLUCION
FROM DEVOLUCIONES d
JOIN CLIENTE c ON d.DEV_CED_CLIENTE = c.CEDULA_CLIENTE
JOIN PRODUCTOS p ON d.DEV_COD_PRODUCTO = p.COD_PRODUCTO
JOIN FACTURAS f ON d.DEV_COD_FACTURA = f.COD_FACTURA;

--Vista de las facturas con informaciï¿½n del cliente, el producto y el colaborador:
CREATE VIEW vista_facturas AS
SELECT f.COD_FACTURA, c.NOMBRE AS CLIENTE, p.NOMBRE AS PRODUCTO, col.NOMBRE AS COLABORADOR, f.FECHA, f.TOTAL_PAGADO
FROM FACTURAS f
JOIN CLIENTE c ON f.FAC_CED_CLIENTE = c.CEDULA_CLIENTE
JOIN PRODUCTOS p ON f.FAC_COD_PRODUCTO = p.COD_PRODUCTO
JOIN COLABORADORES col ON f.FAC_ID_COLABORADOR = col.ID_COLABORADOR;

--Vista de los productos con su categorï¿½a:
CREATE VIEW vista_productos AS
SELECT p.COD_PRODUCTO, p.NOMBRE, p.DESCRIPCION, p.PRECIO, p.STOCK, c.NOMBRE AS CATEGORIA, p.ESTADO
FROM PRODUCTOS p JOIN CATEGORIA c
ON p.PRO_ID_CATEGORIA = c.ID_CATEGORIA;

--Vista de ventas totales por categorï¿½a:
CREATE VIEW V_VENTAS_CATEGORIA AS
SELECT
  C.NOMBRE AS CATEGORIA,
  SUM(F.TOTAL_PAGADO) AS VENTAS_TOTALES
FROM
  CATEGORIA C
  JOIN PRODUCTOS P ON C.ID_CATEGORIA = P.PRO_ID_CATEGORIA
  JOIN FACTURAS F ON P.COD_PRODUCTO = F.FAC_COD_PRODUCTO
GROUP BY
  C.NOMBRE;

--Vista de productos con bajo inventario:
CREATE VIEW V_PRODUCTOS_BAJO_INVENTARIO AS
SELECT
  P.COD_PRODUCTO,
  P.NOMBRE,
  P.STOCK
FROM
  PRODUCTOS P
WHERE
  P.STOCK < 10;

--Vista de ventas por producto y fecha:
CREATE VIEW V_VENTAS_PRODUCTO_FECHA AS
SELECT
  P.COD_PRODUCTO,
  P.NOMBRE,
  F.FECHA,
  SUM(F.TOTAL_PAGADO) AS VENTAS_TOTALES
FROM
  PRODUCTOS P
  JOIN FACTURAS F ON P.COD_PRODUCTO = F.FAC_COD_PRODUCTO
GROUP BY
  P.COD_PRODUCTO,
  P.NOMBRE,
  F.FECHA;

--Vista de clientes y sus compras:
CREATE VIEW V_CLIENTES_COMPRAS AS
SELECT
  C.CEDULA_CLIENTE,
  C.NOMBRE,
  C.APELLIDO_1,
  C.APELLIDO_2,
  F.FECHA,
  P.NOMBRE AS PRODUCTO,
  F.TOTAL_PAGADO
FROM
  CLIENTE C
  JOIN FACTURAS F ON C.CEDULA_CLIENTE = F.FAC_CED_CLIENTE
  JOIN PRODUCTOS P ON F.FAC_COD_PRODUCTO = P.COD_PRODUCTO;

--Vista de ventas por mes y producto:
CREATE VIEW VENTAS_MENSUALES_PRODUCTOS AS
SELECT TO_CHAR(FECHA, 'YYYY-MM') AS MES,
       NOMBRE AS NOMBRE_PRODUCTO,
       SUM(TOTAL_PAGADO) AS TOTAL_VENTAS
FROM FACTURAS
JOIN PRODUCTOS ON FACTURAS.FAC_COD_PRODUCTO = PRODUCTOS.COD_PRODUCTO
GROUP BY TO_CHAR(FECHA, 'YYYY-MM'), NOMBRE;

--Vista de clientes con mï¿½s compras
CREATE VIEW CLIENTES_CON_MAS_COMPRAS AS
SELECT CLIENTE.CEDULA_CLIENTE,
       CLIENTE.NOMBRE,
       CLIENTE.APELLIDO_1,
       CLIENTE.APELLIDO_2,
       COUNT(FACTURAS.COD_FACTURA) AS NUM_COMPRAS
FROM CLIENTE
JOIN FACTURAS ON CLIENTE.CEDULA_CLIENTE = FACTURAS.FAC_CED_CLIENTE
GROUP BY CLIENTE.CEDULA_CLIENTE, CLIENTE.NOMBRE, CLIENTE.APELLIDO_1, CLIENTE.APELLIDO_2
ORDER BY NUM_COMPRAS DESC;


--Vista de clientes con menos compras, tambien se puede con mas compras y mostrar a los tres principales
CREATE VIEW CLIENTES_MENOS_COMPRAS AS
SELECT CEDULA_CLIENTE, NOMBRE, APELLIDO_1, APELLIDO_2, CORREO, TELEFONO, DIRECCION
FROM CLIENTE
WHERE CEDULA_CLIENTE IN (
  SELECT FAC_CED_CLIENTE
  FROM FACTURAS
  GROUP BY FAC_CED_CLIENTE
  ORDER BY COUNT(*) ASC
  FETCH FIRST 3 ROWS ONLY
);

--Vista de stock por proveedor, se debe de crear cuando la tabla este llena
CREATE VIEW STOCK_POR_PROVEEDOR AS
SELECT PROVEEDORES.NOMBRE AS NOMBRE_PROVEEDOR,
       PRODUCTOS.NOMBRE AS NOMBRE_PRODUCTO,
       PRODUCTOS.STOCK AS STOCK_DISPONIBLE
FROM PRODUCTOS
JOIN PROVEEDORES ON PRODUCTOS.ID_PROVEEDOR = PROVEEDORES.ID_PROVEEDOR
WHERE PRODUCTOS.ESTADO = 'DISPONIBLE';

-- Paquete de Cliente

---------------------------------------------------------------------------------------------------

DELETE FROM CLIENTE;
TRUNCATE TABLE CLIENTE;

EXEC sp_insertar_cliente (1, 'Juan', 'Pï¿½rez', 'Garcï¿½a', TO_DATE('1990/01/01', 'yyyy/mm/dd'), 'juanperez@gmail.com', '1234567890', 'Calle 1, Ciudad 1');

EXEC sp_insertar_cliente (2, 'Marï¿½a', 'Gonzï¿½lez', 'Hernï¿½ndez', TO_DATE('1995/05/05', 'yyyy/mm/dd'), 'mariagonzalez@gmail.com', '2345678901', 'Calle 2, Ciudad 2');

EXEC sp_insertar_cliente (3, 'Pedro', 'Rodrï¿½guez', 'Lï¿½pez', TO_DATE('1985/03/15', 'yyyy/mm/dd'), 'pedrorodriguez@gmail.com', '3456789012', 'Calle 3, Ciudad 3');

EXEC sp_insertar_cliente (4, 'Luis', 'Martï¿½nez', 'Sï¿½nchez', TO_DATE('1992/08/20', 'yyyy/mm/dd'), 'luismartinez@gmail.com', '4567890123', 'Calle 4, Ciudad 4');

EXEC sp_insertar_cliente (5, 'Ana', 'Lï¿½pez', 'Garcï¿½a', TO_DATE('1993/06/25', 'yyyy/mm/dd'), 'analopez@gmail.com', '5678901234', 'Calle 5, Ciudad 5');

EXEC sp_insertar_cliente (6, 'Jorge', 'Garcï¿½a', 'Martï¿½nez', TO_DATE('1988/12/10', 'yyyy/mm/dd'), 'jorgegarcia@gmail.com', '6789012345', 'Calle 6, Ciudad 6');

EXEC sp_insertar_cliente (7, 'Laura', 'Gonzï¿½lez', 'Sï¿½nchez', TO_DATE('1994/07/30', 'yyyy/mm/dd'), 'lauragonzalez@gmail.com', '7890123456', 'Calle 7, Ciudad 7');

EXEC sp_insertar_cliente (8, 'Carlos', 'Martï¿½nez', 'Gonzï¿½lez', TO_DATE('1980/04/12', 'yyyy/mm/dd'), 'carlosmartinez@gmail.com', '8901234567', 'Calle 8, Ciudad 8');

EXEC sp_insertar_cliente (9, 'Marta', 'Hernï¿½ndez', 'Pï¿½rez', TO_DATE('1987/10/05', 'yyyy/mm/dd'), 'martahernandez@gmail.com', '9012345678', 'Calle 9, Ciudad 9');

EXEC sp_insertar_cliente (10, 'Sofï¿½a', 'Garcï¿½a', 'Lï¿½pez', TO_DATE('1991/02/28', 'yyyy/mm/dd'), 'sofiagarcia@gmail.com', '0123456789', 'Calle 10, Ciudad 10');

EXEC sp_insertar_cliente (11, 'Julio', 'Pï¿½rez', 'Garcï¿½a', TO_DATE('1989/09/15', 'yyyy/mm/dd'), 'julioperez@gmail.com', '1234567890', 'Calle 11, Ciudad 11');

EXEC sp_insertar_cliente (12, 'Lucï¿½a', 'Gonzï¿½lez', 'Hernï¿½ndez', TO_DATE('1997/03/20', 'yyyy/mm/dd'), 'luciagonzalez@gmail.com', '2345678901', 'Calle 12, Ciudad 12');

EXEC sp_insertar_cliente (13, 'Alberto', 'Rodrï¿½guez', 'Lï¿½pez', TO_DATE('1993/06/10', 'yyyy/mm/dd'), 'albertorodriguez@gmail.com', '3456789012', 'Calle 13, Ciudad 13');

EXEC sp_insertar_cliente (14, 'Carolina', 'Martï¿½nez', 'Sï¿½nchez', TO_DATE('1986/11/25', 'yyyy/mm/dd'), 'carolinamartinez@gmail.com', '4567890123', 'Calle 14, Ciudad 14');

EXEC sp_insertar_cliente (15, 'Luis', 'Fernï¿½ndez', 'Garcï¿½a', TO_DATE('1992/08/18', 'yyyy/mm/dd'), 'luisfernandez@gmail.com', '5678901234', 'Calle 15, Ciudad 15');

EXEC sp_insertar_cliente (16, 'Ana', 'Lï¿½pez', 'Gonzï¿½lez', TO_DATE('1995/05/07', 'yyyy/mm/dd'), 'analg@gmail.com', '6789012345', 'Calle 16, Ciudad 16');

EXEC sp_insertar_cliente (17, 'Juan', 'Garcï¿½a', 'Pï¿½rez', TO_DATE('1984/02/22', 'yyyy/mm/dd'), 'juangarcia@gmail.com', '7890123456', 'Calle 17, Ciudad 17');

EXEC sp_insertar_cliente (18, 'Marï¿½a', 'Hernï¿½ndez', 'Gonzï¿½lez', TO_DATE('1990/09/03', 'yyyy/mm/dd'), 'mariahernandez@gmail.com', '8901234567', 'Calle 18, Ciudad 18');

---------------------------------------------------------------------------------------------------------------------------------------
DELETE FROM COLABORADORES;
TRUNCATE TABLE COLABORADORES;

EXEC sp_insertar_colaborador (1, '1234567890', 'Juan', 'Pï¿½rez', 'Garcï¿½a', 'juan.perez@ejemplo.com', '555-1234', 'Gerente de Tienda', 'Calle 1, Ciudad 1');

EXEC sp_insertar_colaborador (2, '2345678901', 'Marï¿½a', 'Lï¿½pez', 'Gonzï¿½lez', 'maria.lopez@ejemplo.com', '555-2345', 'Encargado de Ventas', 'Calle 1, Ciudad 1');

EXEC sp_insertar_colaborador (3, '3456789012', 'Pedro', 'Gonzï¿½lez', 'Sï¿½nchez', 'pedro.gonzalez@ejemplo.com', '555-3456', 'Tï¿½cnico de Soporte', 'Calle 1, Ciudad 1');

EXEC sp_insertar_colaborador (4, '4567890123', 'Ana', 'Ramï¿½rez', 'Jimï¿½nez', 'ana.ramirez@ejemplo.com', '555-4567', 'Vendedor', 'Calle 1, Ciudad 1');

EXEC sp_insertar_colaborador (5, '5678901234', 'Carlos', 'Dï¿½az', 'Martï¿½nez', 'carlos.diaz@ejemplo.com', '555-5678', 'Tï¿½cnico de Reparaciï¿½n', 'Calle 2, Ciudad 2');

EXEC sp_insertar_colaborador (6, '6789012345', 'Sofï¿½a', 'ï¿½lvarez', 'Hernï¿½ndez', 'sofia.alvarez@ejemplo.com', '555-6789', 'Vendedor', 'Calle 2, Ciudad 2');

EXEC sp_insertar_colaborador (7, '7890123456', 'Diego', 'Gï¿½mez', 'Gutiï¿½rrez', 'diego.gomez@ejemplo.com', '555-7890', 'Gerente de Tienda', 'Calle 2, Ciudad 2');

EXEC sp_insertar_colaborador (8, '8901234567', 'Laura', 'Martï¿½nez', 'Sï¿½nchez', 'laura.martinez@ejemplo.com', '555-8901', 'Encargado de Ventas', 'Calle 2, Ciudad 2');

EXEC sp_insertar_colaborador (9, '9012345678', 'Javier', 'Pï¿½rez', 'Fernï¿½ndez', 'javier.perez@ejemplo.com', '555-9012', 'Tï¿½cnico de Soporte', 'Calle 2, Ciudad 2');

EXEC sp_insertar_colaborador (10, '0123456789', 'Marcela', 'Sï¿½nchez', 'ï¿½lvarez', 'marcela.sanchez@ejemplo.com', '555-0123', 'Vendedor', 'Calle 3, Ciudad 3');

EXEC sp_insertar_colaborador (11, '1234567890', 'Gabriel', 'Hernï¿½ndez', 'Ramï¿½rez', 'gabriel.hernandez@ejemplo.com', '555-1234', 'Tï¿½cnico de Reparaciï¿½n', 'Calle 3, Ciudad 3');

EXEC sp_insertar_colaborador (12, '2345678901', 'Ana', 'Gonzï¿½lez', 'Garcï¿½a', 'ana.gonzalez@ejemplo.com', '555-2345', 'Vendedor', 'Calle 3, Ciudad 3');

EXEC sp_insertar_colaborador (13, '3456789012', 'Sofï¿½a', 'Castro', 'Jimï¿½nez', 'sofia.castro@ejemplo.com', '555-3456', 'Gerente de Tienda', 'Calle 4, Ciudad 4');

EXEC sp_insertar_colaborador (14, '4567890123', 'Mario', 'Vargas', 'Garcï¿½a', 'mario.vargas@ejemplo.com', '555-4567', 'Encargado de Ventas', 'Calle 4, Ciudad 4');

EXEC sp_insertar_colaborador (15, '5678901234', 'Lucï¿½a', 'Pï¿½rez', 'Sï¿½nchez', 'lucia.perez@ejemplo.com', '555-5678', 'Tï¿½cnico de Soporte', 'Calle 4, Ciudad 4');

EXEC sp_insertar_colaborador (16, '6789012345', 'Juan', 'Gutiï¿½rrez', 'Fernï¿½ndez', 'juan.gutierrez@ejemplo.com', '555-6789', 'Vendedor', 'Calle 5, Ciudad 5');

EXEC sp_insertar_colaborador (17, '7890123456', 'Ana', 'Martï¿½nez', 'ï¿½lvarez', 'ana.martinez@ejemplo.com', '555-7890', 'Tï¿½cnico de Reparaciï¿½n', 'Calle 5, Ciudad 5');

EXEC sp_insertar_colaborador (18, '8901234567', 'Marï¿½a', 'Fernï¿½ndez', 'Hernï¿½ndez', 'maria.fernandez@ejemplo.com', '555-8901', 'Vendedor', 'Calle 5, Ciudad 5');

---------------------------------------------------------------------------------------------------------------
DELETE FROM PROVEEDORES;
TRUNCATE TABLE PROVEEDORES;

EXEC sp_insertar_proveedor (1, 'Juan Pï¿½rez', 'juanperez@example.com', '2222-2222', 'San Josï¿½, Costa Rica');

EXEC sp_insertar_proveedor (2, 'Marï¿½a Fernï¿½ndez', 'mariafernandez@example.com', '3333-3333', 'Heredia, Costa Rica');

EXEC sp_insertar_proveedor (3, 'Luis Sï¿½nchez', 'luissanchez@example.com', '4444-4444', 'Cartago, Costa Rica');

EXEC sp_insertar_proveedor (4, 'Ana Solano', 'anasolano@example.com', '5555-5555', 'Alajuela, Costa Rica');

EXEC sp_insertar_proveedor (5, 'Jorge Castillo', 'jorgecastillo@example.com', '6666-6666', 'Limï¿½n, Costa Rica');

EXEC sp_insertar_proveedor (6, 'Silvia Ramï¿½rez', 'silviaramirez@example.com', '7777-7777', 'Puntarenas, Costa Rica');

EXEC sp_insertar_proveedor (7, 'Pedro Rojas', 'pedrorojas@example.com', '8888-8888', 'San Josï¿½, Costa Rica');

EXEC sp_insertar_proveedor (8, 'Carmen Chacï¿½n', 'carmenchacon@example.com', '9999-9999', 'Heredia, Costa Rica');

EXEC sp_insertar_proveedor (9, 'Javier Araya', 'javieraraya@example.com', '1111-1111', 'Cartago, Costa Rica');

EXEC sp_insertar_proveedor (10, 'Lucï¿½a Campos', 'luciacampos@example.com', '2222-2222', 'Alajuela, Costa Rica');

EXEC sp_insertar_proveedor (11, 'Ricardo Umaï¿½a', 'ricardoumana@example.com', '3333-3333', 'Limï¿½n, Costa Rica');

EXEC sp_insertar_proveedor (12, 'Mariana Jimï¿½nez', 'marianajimenez@example.com', '4444-4444', 'Puntarenas, Costa Rica');

EXEC sp_insertar_proveedor (13, 'Eduardo Castro', 'eduardocastro@example.com', '5555-5555', 'San Josï¿½, Costa Rica');

EXEC sp_insertar_proveedor (14, 'Carolina Solï¿½s', 'carolinasolis@example.com', '6666-6666', 'Heredia, Costa Rica');

EXEC sp_insertar_proveedor (15, 'Diego Hernï¿½ndez', 'diegohernandez@example.com', '7777-7777', 'Cartago, Costa Rica');

EXEC sp_insertar_proveedor (16, 'Fabiola Ugalde', 'fabiolaugalde@example.com', '8888-8888', 'Alajuela, Costa Rica');

EXEC sp_insertar_proveedor (17, 'Andrï¿½s Esquivel', 'andresesquivel@example.com', '9999-9999', 'Limï¿½n, Costa Rica');

EXEC sp_insertar_proveedor (18, 'Verï¿½nica Fernï¿½ndez', 'veronicafernandez@example.com', '1111-1111', 'Puntarenas, Costa Rica');

EXEC sp_insertar_proveedor (19, 'Gustavo Quesada', 'gustavoquesada@example.com', '2222-2222', 'San Josï¿½, Costa Rica');

EXEC sp_insertar_proveedor (20, 'Ana Martï¿½nez', 'anamartinez@example.com', '3333-3333', 'Heredia, Costa Rica');

EXEC sp_insertar_proveedor (21, 'Juan Vargas', 'juanvargas@example.com', '4444-4444', 'Cartago, Costa Rica');

------------------------------------------------------------------------------------------------------------
DELETE FROM SUCURSALES;
TRUNCATE TABLE SUCURSALES;

EXEC sp_insertar_sucursal (1, 'Sucursal San Josï¿½', '2222-2222', 'San Josï¿½, Costa Rica');

EXEC sp_insertar_sucursal (2, 'Sucursal Alajuela', '3333-3333', 'Alajuela, Costa Rica');

EXEC sp_insertar_sucursal (3, 'Sucursal Heredia', '4444-4444', 'Heredia, Costa Rica');

EXEC sp_insertar_sucursal (4, 'Sucursal Cartago', '5555-5555', 'Cartago, Costa Rica');

EXEC sp_insertar_sucursal (5, 'Sucursal Guanacaste', '6666-6666', 'Guanacaste, Costa Rica');

EXEC sp_insertar_sucursal (6, 'Sucursal Puntarenas', '7777-7777', 'Puntarenas, Costa Rica');

EXEC sp_insertar_sucursal (7, 'Sucursal Limï¿½n', '8888-8888', 'Limï¿½n, Costa Rica');

EXEC sp_insertar_sucursal (8, 'Sucursal San Carlos', '9999-9999', 'San Carlos, Costa Rica');

EXEC sp_insertar_sucursal (9, 'Sucursal Desamparados', '1010-1010', 'Desamparados, Costa Rica');

EXEC sp_insertar_sucursal (10, 'Sucursal Escazï¿½', '1111-1111', 'Escazï¿½, Costa Rica');

EXEC sp_insertar_sucursal (11, 'Sucursal Tibï¿½s', '1212-1212', 'Tibï¿½s, Costa Rica');

EXEC sp_insertar_sucursal (12, 'Sucursal San Ramï¿½n', '1313-1313', 'San Ramï¿½n, Costa Rica');

EXEC sp_insertar_sucursal (13, 'Sucursal Nicoya', '1414-1414', 'Nicoya, Costa Rica');

EXEC sp_insertar_sucursal (14, 'Sucursal Liberia', '1515-1515', 'Liberia, Costa Rica');

EXEC sp_insertar_sucursal (15, 'Sucursal Santa Cruz', '1616-1616', 'Santa Cruz, Costa Rica');

EXEC sp_insertar_sucursal (16, 'Sucursal Pï¿½rez Zeledï¿½n', '1717-1717', 'Pï¿½rez Zeledï¿½n, Costa Rica');

EXEC sp_insertar_sucursal (17, 'Sucursal Turrialba', '1818-1818', 'Turrialba, Costa Rica');

-------------------------------------------------------------------------------------------------------
DELETE FROM CATEGORIA;
TRUNCATE TABLE CATEGORIA;

EXEC sp_insertar_categoria (1, 'Hardware', 'Productos fï¿½sicos como placas base, procesadores, tarjetas grï¿½ficas, discos duros, etc.');

EXEC sp_insertar_categoria (2, 'Software', 'Programas, sistemas operativos, aplicaciones, etc.');

EXEC sp_insertar_categoria (3, 'Perifï¿½ricos', 'Dispositivos externos como teclados, ratones, monitores, impresoras, etc.');

EXEC sp_insertar_categoria (4, 'Accesorios', 'Productos adicionales como cables, adaptadores, ventiladores, fuentes de poder, etc.');

-------------------------------------------------------------------------------------------------------------------------------------------
DELETE FROM PRODUCTOS;
TRUNCATE TABLE PRODUCTOS;

select * from productos;

EXEC sp_insertar_producto (1, 'Placa madre ASUS ROG Strix Z390-E Gaming', 'Placa madre de alta gama para procesadores Intel', 450.99, 20, 1, 'Disponible');

EXEC sp_insertar_producto (2, 'Procesador Intel Core i9-11900K', 'Procesador de gama alta para gaming y aplicaciones exigentes', 619.99, 15, 1, 'Disponible');

EXEC sp_insertar_producto (3, 'Tarjeta grï¿½fica NVIDIA GeForce RTX 3080', 'Tarjeta grï¿½fica de ï¿½ltima generaciï¿½n para gaming y renderizado', 1199.99, 10, 1, 'Agotado');

EXEC sp_insertar_producto (4, 'Microsoft Windows 10 Pro', 'Sistema operativo de Microsoft para usuarios profesionales', 199.99, 50, 2, 'Disponible');

EXEC sp_insertar_producto (5, 'Adobe Photoshop CC 2022', 'Software de ediciï¿½n de imï¿½genes y diseï¿½o grï¿½fico', 20.99, 100, 2, 'Disponible');

EXEC sp_insertar_producto (6, 'Teclado mecï¿½nico Corsair K100 RGB', 'Teclado mecï¿½nico con retroiluminaciï¿½n LED RGB', 199.99, 25, 3, 'Disponible');

EXEC sp_insertar_producto (7, 'Monitor ASUS TUF Gaming VG279QM', 'Monitor gaming de alta frecuencia de actualizaciï¿½n', 399.99, 15, 3, 'Disponible');

EXEC sp_insertar_producto (8, 'Cable HDMI 2.1 de 2 metros', 'Cable HDMI de alta velocidad y ancho de banda para video y audio', 14.99, 100, 4, 'Disponible');

EXEC sp_insertar_producto (9, 'Fuente de poder modular Corsair RM850x', 'Fuente de poder con certificaciï¿½n 80 PLUS Gold y cableado modular', 179.99, 20, 4, 'Disponible');

EXEC sp_insertar_producto (10, 'Mouse gamer Logitech G502 HERO', 'Mouse gaming con sensor ï¿½ptico avanzado y pesos ajustables', 79.99, 30, 3, 'Disponible');

EXEC sp_insertar_producto (11, 'Auriculares inalï¿½mbricos Sony WH-1000XM4', 'Auriculares con cancelaciï¿½n de ruido y alta calidad de sonido', 349.99, 10, 3, 'Disponible');

EXEC sp_insertar_producto (12, 'Router Wi-Fi ASUS RT-AX86U', 'Router Wi-Fi de alta velocidad y cobertura para gaming y streaming', 259.99, 5, 1, 'Disponible');

EXEC sp_insertar_producto (13, 'Disco duro externo Western Digital Passport 4 TB', 'Disco duro externo portï¿½til con conexiï¿½n USB 3.0 y 4 TB de capacidad', 119.99, 8, 1, 'Disponible');

EXEC sp_insertar_producto (14, 'Proyector BenQ MH733', 'Proyector de alta resoluciï¿½n y brillo para presentaciones y cine en casa', 699.99, 3, 2, 'Disponible');

EXEC sp_insertar_producto (15, 'Impresora lï¿½ser HP Color LaserJet Pro MFP M277dw', 'Impresora multifunciï¿½n lï¿½ser con conexiï¿½n Wi-Fi y NFC', 399.99, 6, 2, 'Disponible');

EXEC sp_insertar_producto (16, 'Mochila para laptop SwissGear SA1923', 'Mochila para laptop con compartimentos acolchados y resistentes al agua', 79.99, 20, 4, 'Disponible');

EXEC sp_insertar_producto (17, 'Teclado mecï¿½nico Corsair K95 RGB Platinum XT', 'Teclado gaming mecï¿½nico con retroiluminaciï¿½n RGB y teclas programables', 199.99, 15, 3, 'Disponible');

EXEC sp_insertar_producto (18, 'Monitor gaming Alienware AW3418DW', 'Monitor ultrawide para gaming con resoluciï¿½n WQHD y tasa de refresco de 120 Hz', 999.99, 5, 2, 'Disponible');

EXEC sp_insertar_producto (19, 'Laptop MSI GS65 Stealth Thin', 'Laptop gaming delgada y ligera con procesador Intel Core i7 y grï¿½fica NVIDIA GeForce GTX 1070', 1699.99, 3, 4, 'Disponible');

EXEC sp_insertar_producto (20, 'Altavoces Bluetooth Bose SoundLink Revolve', 'Altavoces portï¿½tiles con sonido de 360 grados y conectividad Bluetooth', 199.99, 10, 3, 'Disponible');

EXEC sp_insertar_producto (21, 'Cï¿½mara fotogrï¿½fica Sony Alpha a7 III', 'Cï¿½mara mirrorless con sensor de fotograma completo y enfoque automï¿½tico de alta velocidad', 1999.99, 2, 5, 'Disponible');

EXEC sp_insertar_producto (22, 'Tablet Apple iPad Pro de 12,9 pulgadas', 'Tablet con pantalla Retina y procesador A12X Bionic', 999.99, 7, 4, 'Disponible');

EXEC sp_insertar_producto (23, 'Smartwatch Garmin Forerunner 945', 'Reloj deportivo con GPS, sensor de frecuencia cardï¿½aca y funciones avanzadas de entrenamiento', 599.99, 5, 6, 'Disponible');

EXEC sp_insertar_producto (24, 'Kit de realidad virtual Oculus Quest 2', 'Sistema de realidad virtual inalï¿½mbrico con controladores Touch y grï¿½ficos de alta resoluciï¿½n', 399.99, 4, 2, 'Disponible');

EXEC sp_insertar_producto (25, 'Procesador Intel Core i9-11900K', 'Procesador de 11ï¿½ generaciï¿½n para desktop con 8 nï¿½cleos y 16 hilos', 599.99, 8, 1, 'Disponible');

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
DELETE FROM FACTURAS;
TRUNCATE TABLE FACTURAS;

EXEC sp_insertar_factura (1, 2, 2, 8, TO_DATE('2023/04/16', 'yyyy/mm/dd'), 250.99);

EXEC sp_insertar_factura (2, 5, 8, 5, TO_DATE('2023/04/15', 'yyyy/mm/dd'), 599.99);

EXEC sp_insertar_factura (3, 12, 11, 11, TO_DATE('2023/04/14', 'yyyy/mm/dd'), 129.99);

EXEC sp_insertar_factura (4, 1, 1, 18, TO_DATE('2023/04/13', 'yyyy/mm/dd'), 299.99);

EXEC sp_insertar_factura (5, 8, 16, 4, TO_DATE('2023/04/12', 'yyyy/mm/dd'), 159.99);

EXEC sp_insertar_factura (6, 3, 3, 16, TO_DATE('2023/04/11', 'yyyy/mm/dd'), 99.99);

EXEC sp_insertar_factura (7, 13, 19, 6, TO_DATE('2023/04/10', 'yyyy/mm/dd'), 599.99);

EXEC sp_insertar_factura (8, 7, 25, 3, TO_DATE('2023/04/09', 'yyyy/mm/dd'), 1199.99);

EXEC sp_insertar_factura (9, 15, 24, 12, TO_DATE('2023/04/08', 'yyyy/mm/dd'), 499.99);

EXEC sp_insertar_factura (10, 4, 22, 9, TO_DATE('2023/04/07', 'yyyy/mm/dd'), 239.99);

EXEC sp_insertar_factura (11, 5, 1, 10, TO_DATE('2022-02-01', 'YYYY-MM-DD'), 1500);

EXEC sp_insertar_factura (12, 6, 2, 11, TO_DATE('2022-02-02', 'YYYY-MM-DD'), 2000);

EXEC sp_insertar_factura (13, 7, 3, 12, TO_DATE('2022-02-03', 'YYYY-MM-DD'), 2500);

EXEC sp_insertar_factura (14, 8, 4, 13, TO_DATE('2022-02-04', 'YYYY-MM-DD'), 3000);

EXEC sp_insertar_factura (15, 9, 5, 14, TO_DATE('2022-02-05', 'YYYY-MM-DD'), 3500);

EXEC sp_insertar_factura (16, 10, 6, 15, TO_DATE('2022-02-06', 'YYYY-MM-DD'), 4000);

EXEC sp_insertar_factura (17, 11, 7, 16, TO_DATE('2022-02-07', 'YYYY-MM-DD'), 4500);

EXEC sp_insertar_factura (18, 12, 8, 17, TO_DATE('2022-02-08', 'YYYY-MM-DD'), 5000);

EXEC sp_insertar_factura (19, 13, 9, 18, TO_DATE('2023/04/16', 'YYYY-MM-DD'), 5500);

EXEC sp_insertar_factura (20, 14, 10, 1, TO_DATE('2022-02-10', 'YYYY-MM-DD'), 6000);

------------------------------------------------------------------------------------------------------------------------------
DELETE FROM DEVOLUCIONES;
TRUNCATE TABLE DEVOLUCIONES;

EXEC sp_insertar_devolucion (1, TO_DATE('2022-01-01', 'YYYY-MM-DD'), 5, 10, 3, 50.00);

EXEC sp_insertar_devolucion (2, TO_DATE('2022-02-02', 'YYYY-MM-DD'), 12, 18, 7, 25.50);

EXEC sp_insertar_devolucion (3, TO_DATE('2022-03-03', 'YYYY-MM-DD'), 4, 4, 6, 10.00);

EXEC sp_insertar_devolucion (4, TO_DATE('2022-04-04', 'YYYY-MM-DD'), 8, 21, 9, 75.00);

EXEC sp_insertar_devolucion (5, TO_DATE('2022-05-05', 'YYYY-MM-DD'), 16, 5, 15, 12.99);

EXEC sp_insertar_devolucion (6, TO_DATE('2022-06-06', 'YYYY-MM-DD'), 3, 1, 4, 50.00);

EXEC sp_insertar_devolucion (7, TO_DATE('2022-07-07', 'YYYY-MM-DD'), 14, 12, 10, 35.00);

EXEC sp_insertar_devolucion (8, TO_DATE('2022-08-08', 'YYYY-MM-DD'), 6, 7, 5, 20.00);

EXEC sp_insertar_devolucion (9, TO_DATE('2022-09-09', 'YYYY-MM-DD'), 11, 24, 19, 100.00);

EXEC sp_insertar_devolucion (10, TO_DATE('2022-10-10', 'YYYY-MM-DD'), 7, 9, 3, 30.00);

EXEC sp_insertar_devolucion (22, TO_DATE('2022-02-01', 'YYYY-MM-DD'), 10, 8, 11, 50.00);

EXEC sp_insertar_devolucion (23, TO_DATE('2022-02-02', 'YYYY-MM-DD'), 14, 12, 17, 80.00);

EXEC sp_insertar_devolucion (24, TO_DATE('2022-02-05', 'YYYY-MM-DD'), 9, 5, 10, 20.00);

EXEC sp_insertar_devolucion (25, TO_DATE('2022-02-06', 'YYYY-MM-DD'), 3, 3, 6, 30.00);

EXEC sp_insertar_devolucion (26, TO_DATE('2022-02-10', 'YYYY-MM-DD'), 8, 2, 4, 15.00);

EXEC sp_insertar_devolucion (27, TO_DATE('2022-02-12', 'YYYY-MM-DD'), 7, 20, 14, 100.00);



----------------------------------------------------------------------------------------------

--Vista para Reporte de Producto Mas Vendido
CREATE OR REPLACE VIEW PRODUCTOS_MAS_VENDIDOS AS
SELECT p.NOMBRE AS NOMBRE_PRODUCTO, COUNT(*) AS CANTIDAD_VENTAS
FROM FACTURAS f
INNER JOIN PRODUCTOS p ON f.FAC_COD_PRODUCTO = p.COD_PRODUCTO
GROUP BY p.NOMBRE
ORDER BY COUNT(*) DESC
FETCH FIRST 4 ROWS ONLY;


select * from PRODUCTOS_MAS_VENDIDOS;

--Vista para filtrar las ventas del colaborador por semana
CREATE OR REPLACE VIEW VENTAS_SEMANALES_COLABORADOR AS
SELECT c.NOMBRE AS NOMBRE_COLABORADOR, p.NOMBRE AS NOMBRE_PRODUCTO,
       COUNT(*) AS CANTIDAD_VENTAS
FROM FACTURAS f
INNER JOIN PRODUCTOS p ON f.FAC_COD_PRODUCTO = p.COD_PRODUCTO
INNER JOIN COLABORADORES c ON f.FAC_ID_COLABORADOR = c.ID_COLABORADOR
WHERE TRUNC(f.FECHA) >= TRUNC(SYSDATE) - 7
GROUP BY c.NOMBRE, p.NOMBRE
ORDER BY COUNT(*) DESC;

select * from ventas_colaborador;

--Vista para filtrar las ventas del colaborador por mes
CREATE OR REPLACE VIEW VENTAS_MENSUALES_COLABORADOR AS
SELECT c.NOMBRE AS NOMBRE_COLABORADOR,
       TO_CHAR(f.FECHA, 'YYYY-MM') AS MES,
       COUNT(*) AS CANTIDAD_VENTAS
FROM FACTURAS f
INNER JOIN COLABORADORES c ON f.FAC_ID_COLABORADOR = c.ID_COLABORADOR
WHERE TRUNC(f.FECHA, 'MONTH') = TRUNC(SYSDATE, 'MONTH') -- Ventas del mes actual
GROUP BY c.NOMBRE, TO_CHAR(f.FECHA, 'YYYY-MM')
ORDER BY c.NOMBRE, TO_CHAR(f.FECHA, 'YYYY-MM');

select * from VENTAS_MENSUALES_COLABORADOR;

--Vista para ver el dia en el que se realizaron mas ventas
CREATE OR REPLACE VIEW DIA_MAX_VENTAS AS
SELECT TO_CHAR(FECHA, 'DD-MON-YYYY') AS DIA, COUNT(*) AS CANTIDAD_VENTAS
FROM FACTURAS
GROUP BY TO_CHAR(FECHA, 'DD-MON-YYYY')
ORDER BY COUNT(*) DESC
FETCH FIRST 1 ROWS ONLY;

select * from DIA_MAX_VENTAS;
